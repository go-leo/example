// Code generated by protoc-gen-go-leo. DO NOT EDIT.
// versions:
// - protoc-gen-go-leo v2.2.0
// source: api/helloworld/helloworld.proto

package helloworld

import (
	context "context"
	client "github.com/go-leo/leo/runner/net/http/client"
	server "github.com/go-leo/leo/runner/net/http/server"
	grpc "google.golang.org/grpc"
	http "net/http"
)

type GreeterHTTPClient interface {
	SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error)
}

type greeterHTTPClient struct {
	cc client.Interface
}

func NewGreeterHTTPClient(cc client.Interface) GreeterHTTPClient {
	return &greeterHTTPClient{cc}
}

func (c *greeterHTTPClient) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, http.MethodPost, "/helloworld.Greeter/SayHello", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func GreeterServiceDesc(srv GreeterServer) func() (any, *grpc.ServiceDesc, *server.ServiceDesc, func(grpc.ClientConnInterface) any) {
	return func() (any, *grpc.ServiceDesc, *server.ServiceDesc, func(grpc.ClientConnInterface) any) {
		return srv, &Greeter_ServiceDesc, &Greeter_HTTP_ServiceDesc, func(cc grpc.ClientConnInterface) any { return NewGreeterClient(cc) }
	}
}

func _Greeter_SayHello_request_constructor() any {
	return new(HelloRequest)
}

func _Greeter_SayHello_HTTP_Handler(cli any, ctx context.Context, in any) (any, error) {
	metadata, _ := server.MetadataFromContext(ctx)
	return cli.(GreeterClient).SayHello(ctx, in.(*HelloRequest), grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
}

// Greeter_HTTP_ServiceDesc is the server.ServiceDesc for Greeter service,
// and not to be introspected or modified (even as a copy)
var Greeter_HTTP_ServiceDesc = server.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []*server.MethodDesc{
		{
			HTTPMethod:         http.MethodPost,
			MethodName:         "SayHello",
			Path:               "/helloworld.Greeter/SayHello",
			Handler:            _Greeter_SayHello_HTTP_Handler,
			RequestConstructor: _Greeter_SayHello_request_constructor,
		},
	},
	Metadata: "api/helloworld/helloworld.proto",
}
